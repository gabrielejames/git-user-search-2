{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielejames/Desktop/task-30/client/src/components/GitHubRepos.js\";\nimport React from \"react\";\nimport Commits from \"./commits\";\n/*\nThis component takes a gitHub username as props. It fetches the user's repos and renders them. It has a child component that takes the username and repo name\nas props and fetches and renders the last commits for that that repo\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GitHubRepos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: this.props.username,\n      reposLoaded: false,\n      repos: []\n    };\n  }\n\n  componentDidMount() {\n    //fetches the repos for the user and returns them. they are then saved as state and rendered by the app\n    try {\n      fetch('/githubrepos/' + this.props.username).then(res => res.json()).then(result => {\n        this.setState({\n          repos: result,\n          reposLoaded: true\n        });\n        console.log(result);\n      }, error => {\n        this.setState({\n          error\n        });\n        console.log(error);\n      });\n    } catch {\n      console.log('Something went wrong');\n    }\n  }\n\n  render() {\n    if (!this.state.reposLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 20\n      }, this);\n    } else return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.repos.map(repo => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"repo-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: repo.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [repo.description, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 48\n          }, this), repo.created_at, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 47\n          }, this), repo.updated_at, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 47\n          }, this), \"Last commits: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Commits, {\n          repo_name: repo.name,\n          username: this.props.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default GitHubRepos;","map":{"version":3,"names":["React","Commits","GitHubRepos","Component","constructor","props","state","user","username","reposLoaded","repos","componentDidMount","fetch","then","res","json","result","setState","console","log","error","render","map","repo","name","description","created_at","updated_at"],"sources":["/Users/gabrielejames/Desktop/task-30/client/src/components/GitHubRepos.js"],"sourcesContent":["import React from \"react\";\nimport Commits from \"./commits\";\n\n/*\nThis component takes a gitHub username as props. It fetches the user's repos and renders them. It has a child component that takes the username and repo name\nas props and fetches and renders the last commits for that that repo\n*/\n\nclass GitHubRepos extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            user : this.props.username,\n            reposLoaded: false,\n            repos: [] \n        };  \n    };\n\n    componentDidMount() {\n\n        //fetches the repos for the user and returns them. they are then saved as state and rendered by the app\n        try {\n            fetch('/githubrepos/' + this.props.username)\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        this.setState({\n                          repos: result,\n                          reposLoaded: true\n                        })\n                        console.log(result)\n                    },\n                    (error) => {\n                        this.setState({error})\n                        console.log(error)\n                    }\n                ) \n            } catch {\n                console.log('Something went wrong');\n            }    \n    }\n\n    render () {\n        \n        if (!this.state.reposLoaded) {\n            return <div>Loading</div>\n        }else return (\n            <div>\n                   {this.state.repos.map(repo => (\n                       \n                        <div className=\"repo-info\">\n                            <h4>{repo.name}</h4>\n                            <p>\n                            {repo.description} <br />\n                            {repo.created_at} <br />\n                            {repo.updated_at} <br />\n                            Last commits: <br />\n                            \n                            </p>\n                            <Commits repo_name={repo.name} username={this.props.username}/>\n                            <hr />\n                        </div>\n                    ))}\n            </div>\n        )\n    }\n}\n\nexport default GitHubRepos;"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA;AACA;AACA;AACA;;;;AAEA,MAAMC,WAAN,SAA0BF,KAAK,CAACG,SAAhC,CAA0C;EAEtCC,WAAW,CAACC,KAAD,EAAQ;IACf,MAAMA,KAAN;IACA,KAAKC,KAAL,GAAa;MACTC,IAAI,EAAG,KAAKF,KAAL,CAAWG,QADT;MAETC,WAAW,EAAE,KAFJ;MAGTC,KAAK,EAAE;IAHE,CAAb;EAKH;;EAEDC,iBAAiB,GAAG;IAEhB;IACA,IAAI;MACAC,KAAK,CAAC,kBAAkB,KAAKP,KAAL,CAAWG,QAA9B,CAAL,CACKK,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAGSG,MAAD,IAAY;QACR,KAAKC,QAAL,CAAc;UACZP,KAAK,EAAEM,MADK;UAEZP,WAAW,EAAE;QAFD,CAAd;QAIAS,OAAO,CAACC,GAAR,CAAYH,MAAZ;MACH,CATT,EAUSI,KAAD,IAAW;QACP,KAAKH,QAAL,CAAc;UAACG;QAAD,CAAd;QACAF,OAAO,CAACC,GAAR,CAAYC,KAAZ;MACH,CAbT;IAeC,CAhBL,CAgBM,MAAM;MACJF,OAAO,CAACC,GAAR,CAAY,sBAAZ;IACH;EACR;;EAEDE,MAAM,GAAI;IAEN,IAAI,CAAC,KAAKf,KAAL,CAAWG,WAAhB,EAA6B;MACzB,oBAAO;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAP;IACH,CAFD,MAEM,oBACF;MAAA,UACQ,KAAKH,KAAL,CAAWI,KAAX,CAAiBY,GAAjB,CAAqBC,IAAI,iBAErB;QAAK,SAAS,EAAC,WAAf;QAAA,wBACI;UAAA,UAAKA,IAAI,CAACC;QAAV;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAA,WACCD,IAAI,CAACE,WADN,oBACmB;YAAA;YAAA;YAAA;UAAA,QADnB,EAECF,IAAI,CAACG,UAFN,oBAEkB;YAAA;YAAA;YAAA;UAAA,QAFlB,EAGCH,IAAI,CAACI,UAHN,oBAGkB;YAAA;YAAA;YAAA;UAAA,QAHlB,iCAIc;YAAA;YAAA;YAAA;UAAA,QAJd;QAAA;UAAA;UAAA;UAAA;QAAA,QAFJ,eASI,QAAC,OAAD;UAAS,SAAS,EAAEJ,IAAI,CAACC,IAAzB;UAA+B,QAAQ,EAAE,KAAKnB,KAAL,CAAWG;QAApD;UAAA;UAAA;UAAA;QAAA,QATJ,eAUI;UAAA;UAAA;UAAA;QAAA,QAVJ;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ;IADR;MAAA;MAAA;MAAA;IAAA,QADE;EAmBT;;AA1DqC;;AA6D1C,eAAeN,WAAf"},"metadata":{},"sourceType":"module"}